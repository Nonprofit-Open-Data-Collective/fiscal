num <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
num
df[[ cash ]]
df[[ si ]]
df[[ pr ]]
df[[ ar ]]
den <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
den
df[[ dda ]]
df[[ tfe ]]
tfe='F9_09_EXP_TOT_TOT'
dda='F9_09_EXP_DEPREC_TOT'
den <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
den
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- df[[ agg.numer ]]
den.b <- ( df[[ agg.denom ]] ) / 365
num <- c( num.a, num.b)
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
num <- c( num.a, num.b)
den <- c( den.a, den.b)
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
num <- c( num.a, num.b)
den <- c( den.a, den.b)
den[ den == 0 ] <- NA
doch <- num / den
doch
1L
dfpart0910[[ dfpart0910==0 ]]
part0910[[ part0910==0 ]]
coh <- rep( NA, nrow( part0910 ) )
coh
part0910[[ part0910$RETURN_TYPE.x=='990' ]]
part0910<-data.frame(left_join( part09,part10,by='ORG_EIN' ))
part0910[[ part0910$RETURN_TYPE.x=='990' ]]
part0910[which(part0910$RETURN_TYPE.x=='990'),'coh'] <- doch_helper(df=part10)
part0910[which(part0910$RETURN_TYPE.x=='990'),'coh']
doch_helper(df=part10)
doch_helper(df=part0910)
df=part0910
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
num.a
den.a
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b
den.b
num <- c( num.a, num.b)
den <- c( den.a, den.b)
# can't divide by zero
print( paste0( "Denominator cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
doch <- num / den
doch
doch_helper <- function(df, cash=f.cash, si=f.si, pr=f.pr, ar=f.ar, tfe=f.tfe, dda=f.dda, agg.numer=NULL, agg.denom=NULL)
{
# pass with default or modified 990 variables
if( is.null( agg.num ) & is.null( agg.den ) )
{
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
}
# pass with 990-EZ or aggregated numerator and denominator
else if( ( is.null( agg.numer )==F & is.null( agg.denom )==F ) )
{
num.b <- df[[ agg.numer ]]
den.b <- ( df[[ agg.denom ]] ) / 365
}
num <- c( num.a, num.b)
den <- c( den.a, den.b)
# can't divide by zero
print( paste0( "Denominator cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
doch <- num / den
return( doch ) }
doch_helper(df=part0910)
f.dda='F9_09_EXP_DEPREC_TOT'
f.tfe='F9_09_EXP_TOT_TOT'
f.ar='F9_10_ASSET_ACC_NET_EOY'
f.pr='F9_10_ASSET_PLEDGE_NET_EOY'
f.si='F9_10_ASSET_SAVING_EOY'
f.cash='F9_10_ASSET_CASH_EOY'
doch_helper <- function(df, cash=f.cash, si=f.si, pr=f.pr, ar=f.ar, tfe=f.tfe, dda=f.dda, agg.numer=NULL, agg.denom=NULL)
{
# pass with default or modified 990 variables
if( is.null( agg.num ) & is.null( agg.den ) )
{
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
}
# pass with 990-EZ or aggregated numerator and denominator
else if( ( is.null( agg.numer )==F & is.null( agg.denom )==F ) )
{
num.b <- df[[ agg.numer ]]
den.b <- ( df[[ agg.denom ]] ) / 365
}
num <- c( num.a, num.b)
den <- c( den.a, den.b)
# can't divide by zero
print( paste0( "Denominator cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
doch <- num / den
return( doch ) }
doch_helper <- function(df, cash=f.cash, si=f.si, pr=f.pr, ar=f.ar, tfe=f.tfe, dda=f.dda, agg.numer=NULL, agg.denom=NULL)
{
# pass with default or modified 990 variables
if( is.null( agg.num ) & is.null( agg.den ) )
{
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
}
# pass with 990-EZ or aggregated numerator and denominator
else if( ( is.null( agg.numer )==F & is.null( agg.denom )==F ) )
{
num.b <- df[[ agg.numer ]]
den.b <- ( df[[ agg.denom ]] ) / 365
}
num <- c( num.a, num.b)
den <- c( den.a, den.b)
# can't divide by zero
den[ den == 0 ] <- NA
doch <- num / den
return( doch ) }
df=part0910
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
num <- c( num.a, num.b)
den <- c( den.a, den.b)
# can't divide by zero
den[ den == 0 ] <- NA
doch <- num / den
doch
doch_helper <- function(df, cash=f.cash, si=f.si, pr=f.pr, ar=f.ar, tfe=f.tfe, dda=f.dda, agg.numer=NULL, agg.denom=NULL)
{
# pass with default or modified 990 variables
if( is.null( agg.num )==T & is.null( agg.den )==T )
{
num.a <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den.a <- ( df[[ tfe ]] - df[[ dda ]] ) / 365
num.b <- NULL
den.b <- NULL
}
# pass with 990-EZ or aggregated numerator and denominator
else if( ( is.null( agg.numer )==F & is.null( agg.denom )==F ) )
{
num.b <- df[[ agg.numer ]]
den.b <- ( df[[ agg.denom ]] ) / 365
}
num <- c( num.a, num.b)
den <- c( den.a, den.b)
# can't divide by zero
den[ den == 0 ] <- NA
doch <- num / den
return( doch ) }
doch_helper(df=part0910)
part0910[which(part0910$RETURN_TYPE.x=='990'),'coh'] <- doch_helper(df=part0910)
part0910<-data.frame(left_join( part09,part10))
part0910[which(part0910$RETURN_TYPE=='990'),'coh']
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x1<-rnorm(1000,100,30)
x2<-rnorm(1000,200,30)
x3<-rnorm(1000,200,30)
x4<-rnorm(1000,100,30)
x5<-rnorm(1000,200,30)
x5[c(1,10,100)]<-0
dat<-data.frame(x1, x2, x3, x4, x5)
a<-get_eidr(df=dat,prog.service.rev='x1',memb.dues='x2',royalties='x3',other.revenue='x4',total.revenue='x5',winsorize=0.98)
#' x3 <- rnorm( 1000,200,30 )
#' x3[ c(1,10,100)] <- 0
#'
#' dat <- data.frame( x1, x2, x3 )
#'
#' a <- get_eidr( df=dat, total.contributions='x1', fund.income='x2', total.revenue='x3', winsorize=0.98 )
#'
#' head( a )
#'
#' @export
get_eidr <- function( df, prog.service.rev, memb.dues, royalties, other.revenue, total.revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ prog.service.rev ]] + df[[ memb.dues ]]+ df[[ royalties ]] + df[[ other.revenue ]]
r <- df[[ total.revenue ]]
# can't divide by zero
print( paste0( "Total revenue cannot be zero: ", sum( r==0 ), " cases have been replaced with NA." ) )
r[ r == 0 ] <- NA
eidr <- num / r
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( eidr, top.p, na.rm=T )
bottom   <- quantile( eidr, bottom.p, na.rm=T )
eidr.w    <- eidr
eidr.w[ eidr.w > top    ] <- top
eidr.w[ eidr.w < bottom ] <- bottom
eidr.n <- scale( eidr.w )
eidr.p <- dplyr::ntile( eidr, 100 )
EIDR <- data.frame( eidr, eidr.w, eidr.n, eidr.p )
print( summary( EIDR ) )
par( mfrow=c(2,2) )
plot( density( eidr,   na.rm=T ), main="Donation/Grant Dependence Ratio (EIDR)" )
plot( density( eidr.w, na.rm=T ), main="EIDR Winsorized" )
plot( density( eidr.n, na.rm=T ), main="EIDR Standardized as Z" )
plot( density( eidr.p, na.rm=T ), main="EIDR as Percentile" )
df.eidr <- cbind( df, EIDR )
return( df.eidr )
}
x1<-rnorm(1000,100,30)
x2<-rnorm(1000,200,30)
x3<-rnorm(1000,200,30)
x4<-rnorm(1000,100,30)
x5<-rnorm(1000,200,30)
x5[c(1,10,100)]<-0
dat<-data.frame(x1, x2, x3, x4, x5)
a<-get_eidr(df=dat,prog.service.rev='x1',memb.dues='x2',royalties='x3',other.revenue='x4',total.revenue='x5',winsorize=0.98)
a<-get_eidr(df=dat,prog.service.rev='x1',memb.dues='x2',royalties='x3',other.revenue='x4',total.revenue='x5',winsorize=0.98)
x1<-rnorm( 1000,100,30 )
x2<-rnorm( 1000,200,30 )
x3<-rnorm( 1000,200,30 )
x4<-rnorm( 1000,100,30 )
x5<-rnorm( 1000,200,30 )
x5[ c(1,10,100) ] <- 0
dat<-data.frame( x1, x2, x3, x4, x5 )
a<-get_iidr( df=dat, invest.income='x1', bond.proceeds='x2', rent.income='x3', other.income='x4', total.revenue='x5', winsorize=0.98)
#' x5<-rnorm( 1000,200,30 )
#' x5[ c(1,10,100) ] <- 0
#'
#' dat<-data.frame( x1, x2, x3, x4, x5 )
#'
#' a<-get_iidr( df=dat, invest.income='x1', bond.proceeds='x2', rent.income='x3', other.income='x4', total.revenue='x5', winsorize=0.98)
#'
#' head( a )
#'
#' @export
get_iidr <- function( df, invest.income, bond.proceeds, rent.income, other.income, total.revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ invest.income ]] + df[[ bond.proceeds ]]+ df[[ rent.income ]] + df[[ other.income ]]
r <- df[[ total.revenue ]]
# can't divide by zero
print( paste0( "Total revenue cannot be zero: ", sum( r==0 ), " cases have been replaced with NA." ) )
r[ r == 0 ] <- NA
iidr <- num / r
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( iidr, top.p, na.rm=T )
bottom   <- quantile( iidr, bottom.p, na.rm=T )
iidr.w    <- iidr
iidr.w[ iidr.w > top    ] <- top
iidr.w[ iidr.w < bottom ] <- bottom
iidr.n <- scale( iidr.w )
iidr.p <- dplyr::ntile( iidr, 100 )
IIDR <- data.frame( iidr, iidr.w, iidr.n, iidr.p )
print( summary( IIDR ) )
par( mfrow=c(2,2) )
plot( density( iidr,   na.rm=T ), main="Investment Income Dependence Ratio (IIDR)" )
plot( density( iidr.w, na.rm=T ), main="IIDR Winsorized" )
plot( density( iidr.n, na.rm=T ), main="IIDR Standardized as Z" )
plot( density( iidr.p, na.rm=T ), main="IIDR as Percentile" )
df.iidr <- cbind( df, IIDR )
return( df.iidr )
}
x1<-rnorm( 1000,100,30 )
x2<-rnorm( 1000,200,30 )
x3<-rnorm( 1000,200,30 )
x4<-rnorm( 1000,100,30 )
x5<-rnorm( 1000,200,30 )
x5[ c(1,10,100) ] <- 0
dat<-data.frame( x1, x2, x3, x4, x5 )
a<-get_iidr( df=dat, invest.income='x1', bond.proceeds='x2', rent.income='x3', other.income='x4', total.revenue='x5', winsorize=0.98)
@export
#' x2<-rnorm( 1000,200,30 )
#' x2[ c(1,10,100) ] <- 0
#'
#' dat<-data.frame( x1, x2 )
#'
#' a<-get_arr( df=dat, total.assets='x1', total.revenues='x2' )
#'
#' head( a )
#'
#' @export
get_arr <- function( df, total.revenue, total.revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
t <- df[[ total.assets ]]
r <- df[[ total.revenue ]]
# can't divide by zero
print( paste0( "Total revenue cannot be zero: ", sum( r==0 ), " cases have been replaced with NA." ) )
r[ r == 0 ] <- NA
arr <- t / r
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( arr, top.p, na.rm=T )
bottom   <- quantile( arr, bottom.p, na.rm=T )
arr.w    <- arr
arr.w[ arr.w > top    ] <- top
arr.w[ arr.w < bottom ] <- bottom
arr.n <- scale( arr.w )
arr.p <- dplyr::ntile( arr, 100 )
ARR <- data.frame( arr, arr.w, arr.n, arr.p )
print( summary( ARR ) )
par( mfrow=c(2,2) )
plot( density( arr,   na.rm=T ), main="Assets to Revenues Ratio (ARR)" )
plot( density( arr.w, na.rm=T ), main="ARR Winsorized" )
plot( density( arr.n, na.rm=T ), main="ARR Standardized as Z" )
plot( density( arr.p, na.rm=T ), main="ARR as Percentile" )
df.arr <- cbind( df, ARR )
return( df.arr )
}
x1<-rnorm( 1000,100,30 )
x2<-rnorm( 1000,200,30 )
x2[ c(1,10,100) ] <- 0
dat<-data.frame( x1, x2 )
a<-get_arr( df=dat, total.assets='x1', total.revenues='x2' )
#' x2<-rnorm( 1000,200,30 )
#' x2[ c(1,10,100) ] <- 0
#'
#' dat<-data.frame( x1, x2 )
#'
#' a<-get_arr( df=dat, total.assets='x1', total.revenues='x2' )
#'
#' head( a )
#'
#' @export
get_arr <- function( df, total.revenue, total.revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
t <- df[[ total.assets ]]
r <- df[[ total.revenue ]]
# can't divide by zero
print( paste0( "Total revenue cannot be zero: ", sum( r==0 ), " cases have been replaced with NA." ) )
r[ r == 0 ] <- NA
arr <- t / r
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( arr, top.p, na.rm=T )
bottom   <- quantile( arr, bottom.p, na.rm=T )
arr.w    <- arr
arr.w[ arr.w > top    ] <- top
arr.w[ arr.w < bottom ] <- bottom
arr.n <- scale( arr.w )
arr.p <- dplyr::ntile( arr, 100 )
ARR <- data.frame( arr, arr.w, arr.n, arr.p )
print( summary( ARR ) )
par( mfrow=c(2,2) )
plot( density( arr,   na.rm=T ), main="Assets to Revenues Ratio (ARR)" )
plot( density( arr.w, na.rm=T ), main="ARR Winsorized" )
plot( density( arr.n, na.rm=T ), main="ARR Standardized as Z" )
plot( density( arr.p, na.rm=T ), main="ARR as Percentile" )
df.arr <- cbind( df, ARR )
return( df.arr )
}
#' x2<-rnorm( 1000,200,30 )
#' x2[ c(1,10,100) ] <- 0
#'
#' dat<-data.frame( x1, x2 )
#'
#' a<-get_arr( df=dat, total.assets='x1', total.revenues='x2' )
#'
#' head( a )
#'
#' @export
get_arr <- function( df, total.assets, total.revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
t <- df[[ total.assets ]]
r <- df[[ total.revenue ]]
# can't divide by zero
print( paste0( "Total revenue cannot be zero: ", sum( r==0 ), " cases have been replaced with NA." ) )
r[ r == 0 ] <- NA
arr <- t / r
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( arr, top.p, na.rm=T )
bottom   <- quantile( arr, bottom.p, na.rm=T )
arr.w    <- arr
arr.w[ arr.w > top    ] <- top
arr.w[ arr.w < bottom ] <- bottom
arr.n <- scale( arr.w )
arr.p <- dplyr::ntile( arr, 100 )
ARR <- data.frame( arr, arr.w, arr.n, arr.p )
print( summary( ARR ) )
par( mfrow=c(2,2) )
plot( density( arr,   na.rm=T ), main="Assets to Revenues Ratio (ARR)" )
plot( density( arr.w, na.rm=T ), main="ARR Winsorized" )
plot( density( arr.n, na.rm=T ), main="ARR Standardized as Z" )
plot( density( arr.p, na.rm=T ), main="ARR as Percentile" )
df.arr <- cbind( df, ARR )
return( df.arr )
}
x1<-rnorm( 1000,100,30 )
x2<-rnorm( 1000,200,30 )
x2[ c(1,10,100) ] <- 0
dat<-data.frame( x1, x2 )
a<-get_arr( df=dat, total.assets='x1', total.revenues='x2' )
a<-get_arr( df=dat, total.assets='x1', total.revenue='x2' )
x1<-rnorm( 1000,100,30 )
x2<-rnorm( 1000,200,30 )
x2[ c(1,10,100) ] <- 0
dat<-data.frame( x1, x2 )
a<-get_per( df=dat, pse='x1', total.expense='x2' )
#' x2<-rnorm( 1000,200,30 )
#' x2[ c(1,10,100) ] <- 0
#'
#' dat<-data.frame( x1, x2 )
#'
#' a<-get_per( df=dat, total.assets='x1', total.revenue='x2' )
#'
#' head( a )
#'
#' @export
get_per <- function( df, pse, total.expense, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
t <- df[[ pse ]]
e <- df[[ total.expense ]]
# can't divide by zero
print( paste0( "Total expenses cannot be zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
per <- t / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( per, top.p, na.rm=T )
bottom   <- quantile( per, bottom.p, na.rm=T )
per.w    <- per
per.w[ per.w > top    ] <- top
per.w[ per.w < bottom ] <- bottom
per.n <- scale( per.w )
per.p <- dplyr::ntile( per, 100 )
PER <- data.frame( per, per.w, per.n, per.p )
print( summary( PER ) )
par( mfrow=c(2,2) )
plot( density( per,   na.rm=T ), main="Program Efficiency Ratio (PER)" )
plot( density( per.w, na.rm=T ), main="PER Winsorized" )
plot( density( per.n, na.rm=T ), main="PER Standardized as Z" )
plot( density( per.p, na.rm=T ), main="PER as Percentile" )
df.per <- cbind( df, PER )
return( df.per )
}
a<-get_per( df=dat, pse='x1', total.expense='x2' )
a<-get_aer( df=dat, mgmt.ge='x1', total.expense='x2' )
#' x2<-rnorm( 1000,200,30 )
#' x2[ c(1,10,100) ] <- 0
#'
#' dat<-data.frame( x1, x2 )
#'
#' a<-get_aer( df=dat, pse='x1', total.expense='x2' )
#'
#' head( a )
#'
#' @export
get_aer <- function( df, mgmt.ge, total.expense, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
m <- df[[ mgmt.ge ]]
e <- df[[ total.expense ]]
# can't divide by zero
print( paste0( "Total expenses cannot be zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
aer <- m / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( aer, top.p, na.rm=T )
bottom   <- quantile( aer, bottom.p, na.rm=T )
aer.w    <- aer
aer.w[ aer.w > top    ] <- top
aer.w[ aer.w < bottom ] <- bottom
aer.n <- scale( aer.w )
aer.p <- dplyr::ntile( aer, 100 )
AER <- data.frame( aer, aer.w, aer.n, aer.p )
print( summary( AER ) )
par( mfrow=c(2,2) )
plot( density( aer,   na.rm=T ), main="Administration Expense Ratio (AER)" )
plot( density( aer.w, na.rm=T ), main="AER Winsorized" )
plot( density( aer.n, na.rm=T ), main="AER Standardized as Z" )
plot( density( aer.p, na.rm=T ), main="AER as Percentile" )
df.aer <- cbind( df, AER )
return( df.aer )
}
x1<-rnorm( 1000,100,30 )
x2<-rnorm( 1000,200,30 )
x2[ c(1,10,100) ] <- 0
dat<-data.frame( x1, x2 )
a<-get_aer( df=dat, mgmt.ge='x1', total.expense='x2' )
