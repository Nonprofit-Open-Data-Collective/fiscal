f <- function(v) {
import::from(magrittr,'%>%')
v <- rlang::quo_name(rlang::enquo(v))
gsub('^c\\(|\\s|\\)$', '', v) %>%
stringr::strsplit(',') %>%
unlist
}
f(c('a','b','c'))
f <- function(v) {
import::from(magrittr,'%>%')
v <- rlang::quo_name(rlang::enquo(v))
gsub('^c\\(|\\s|\\)$', '', v) %>%
stringr::str_split(',') %>%
unlist
}
f(c('a','b','c'))
f(c(a,b,c))
arg2str.v3 <- function (args) {
strs <- sapply (substitute (args), deparse)
if (length (strs) > 1) { strs <- strs [-1] }
return (strs)
}
c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' )
quote(prog.serv.rev)
get_quo-function(x){
name<-rlang::enquo(x[1])
sub<-rlang::set_names(rlang::quo_name(name))
return(sub)
}
get_quo<-function(x){
name<-rlang::enquo(x[1])
sub<-rlang::set_names(rlang::quo_name(name))
return(sub)
}
import::from(dplyr,'{{')
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, {{prog.serv.rev}} = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# quoted/unquoted arguments
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( {{prog.serv.rev}} ) > 2 | length( {{prog.serv.rev}} ) < 1 )
{ stop( "`{{prog.serv.rev}}` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ {{prog.serv.rev}}[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ is.na( dat[ {{prog.serv.rev}}[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==1 ) {
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
dat <- data.frame( x1, x2 )
# specify own column names
d <- get_ssr( df = dat; prog.serv.rev = 'x1'; total.expense = 'x2' )
# specify own column names
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = 'x2' )
jk<-function(df, x){
return(df[{{x}}])
}
jk(df=dat,x=x2)
jk(df=dat,x='x2')
jk<-function(df, x){
require(tidyverse)
return(df[{{x}}])
}
jk(df=dat,x='x2')
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, {{prog.serv.rev}} = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
require(dplyr)
# quoted/unquoted arguments
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( {{prog.serv.rev}} ) > 2 | length( {{prog.serv.rev}} ) < 1 )
{ stop( "`{{prog.serv.rev}}` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ {{prog.serv.rev}}[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ is.na( dat[ {{prog.serv.rev}}[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==1 ) {
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, {{prog.serv.rev}} = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
require(dplyr)
# quoted/unquoted arguments
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( {{prog.serv.rev}} ) > 2 | length( {{prog.serv.rev}} ) < 1 )
{ stop( "`{{prog.serv.rev}}` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ {{prog.serv.rev}}[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ is.na( dat[ {{prog.serv.rev}}[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==1 ) {
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# quoted/unquoted arguments
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( {{prog.serv.rev}} ) > 2 | length( {{prog.serv.rev}} ) < 1 )
{ stop( "`{{prog.serv.rev}}` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ {{prog.serv.rev}}[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ is.na( dat[ {{prog.serv.rev}}[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==1 ) {
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, {{prog.serv.rev}} = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# quoted/unquoted arguments
require(dplyr)
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( {{prog.serv.rev}} )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( {{prog.serv.rev}} ) > 2 | length( {{prog.serv.rev}} ) < 1 )
{ stop( "`{{prog.serv.rev}}` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ {{prog.serv.rev}}[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ is.na( dat[ {{prog.serv.rev}}[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[2] ] )==F ), {{prog.serv.rev}}[2] ]
dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ {{prog.serv.rev}}[1] ] )==F ), {{prog.serv.rev}}[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ 'e' ]]
}
else if ( length( {{prog.serv.rev}} )==1 & length( total.expense )==1 ) {
p <- dat[[ {{prog.serv.rev}} ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
# specify own column names
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = 'x2' )
# specify own column names
d <- get_ssr( df = dat, prog.serv.rev = x1, total.expense = x2 )
# run with default column names
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
# run only with 990 variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_08_REV_PROG_TOT_TOT", total.expense = "F9_09_EXP_TOT_TOT" )
a<-{{c(a,b,c)}}
func <- function(df, ori, dest) {
func <- function(df, ori, dest) {
func <- function(df, ori, dest) {
ori <- deparse(subsitute(ori) )
dest <- deparse(subsitute(dest) )
countrycode(df, origin = ori, destination = dest)
}
func <- function(df, ori, dest) {
ori <- deparse(subsitute(ori) )
dest <- deparse(subsitute(dest) )
countrycode(df, origin = ori, destination = dest)
}
func <- function(x) {
x <- deparse(subsitute(x) )
return(x)
}
func(c(,a,b,d))
func <- function(x) {
x <- deparse(subsitute(x) )
return(x)
}
func(c(a,b,d))
func <- function(x) {
x <- deparse(base::subsitute(x) )
return(x)
}
base::substi
func(c(a,b,d))
func <- function(x) {
x <- base::deparse(base::subsitute(x) )
return(x)
}
func(c(a,b,d))
func(c('a','b','d'))
deparse(subsitute(x) )
library(devtools)
library(roxygen)
install.packages("stats")
install.packages("stats")
